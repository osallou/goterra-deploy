# swagger: "2.0"
openapi: "3.0.0"
info:
  title: GoTerra-Deploy
  description: GoTerra Deployment service API
  version: 0.0.1
  
servers:
  - url: https://goterra.genouest.org
    
components:
  securitySchemes:
    ApiKeyAuth:
      type: apiKey
      in: header
      name: X-API-Key
    JWTToken:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    NSData:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        owners:
          type: array
          items:
            type: string
        members:
          type: array
          items:
            type: string
    Recipe:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        description:
          type: string
        version:
          type: string
        frozen:
          type: boolean
          description: prevent updates
        public:
          type: boolean
        namespace:
          type: string
        base:
          type: string
        parent:
          type: string
        tags:
          type: array
          items:
            type: string
        previous:
          type: string
        inputs:
          description: "expected inputs used for deployment"
          type: object
          additionalProperties:
            type: string
    Template:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        description:
          type: string
        version:
          type: string
        frozen:
          type: boolean
          description: prevent updates
        public:
          type: boolean
        namespace:
          type: string
        tags:
          type: array
          items:
            type: string
        previous:
          type: string
        data:
          description: "template per cloud type"
          type: object
          additionalProperties:
            type: string
        inputs:
          description: "expected inputs used for deployment"
          type: object
          additionalProperties:
            type: string
    Application:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        description:
          type: string
        version:
          type: string
        frozen:
          type: boolean
          description: prevent updates
        public:
          type: boolean
        namespace:
          type: string
        recipes:
          type: array
          items:
            $ref: '#/components/schemas/Recipe'
        template:
          description: "terraform template id"
          type: string
    Endpoint:
      type: object
      properties:
        kind:
          type: string  # openstack, ..
        name:
          type: string
        openstack:
          $ref: '#/components/schemas/EndpointOpenstack'
        features:
          $ref: '#/components/schemas/EndpointFeature'
        inputs:
          description: "expected inputs used for deployment such as credentials"
          type: object
          additionalProperties:
            type: string
        config:
          description: "preset inputs used for deployment such as remote endpoint api url, ..."
          type: object
          additionalProperties:
            type: string          
        images:
          description: "map of image ids for this endpoint"
          type: object
          additionalProperties:
            type: string
    ApplicationRequirements:
      type: object
      properties:
        application:
          type: object
          additionalProperties:
            type: string
        recipes:
          type: object
          additionalProperties:
            type: string
        endpoints:
          type: object
          additionalProperties:
            type: object
            additionalProperties:
              type: string
    TerraformTemplates:
      type: object
      properties:
        variables.tf:
          type: string
        app.tf:
          type: string
    EndpointOpenstack:
      description: "openstack related config"
      type: object
      properties:
        tenant_name:
          type: string
        tenant_id:
          type: string
        auth_url:
          type: string
        region:
          type: string
        domain_name:
          type: string
        domain_id:
          type: string
        project_domain_id:
          type: string
        project_domain_name:
          type: string
        user_domain_id:
          type: string
        user_domain_name:
          type: string
    EndpointFeature:
      type: object
      properties:
        publicip:
          type: boolean
          default: false
        ephemeral_storage:
          type: boolean
          default: false
        shared_storage:
          type: boolean
          default: false
    EndpointSecret:
      type: object
      properties:
        name:
          type: string # endpoint user name => var user_name
        password:
          type: string # endpoint user password => var password
    Run:
      type: object
      properties:
        endpoint:
          type: string
        namespace:
          type: string
        status:
          type: string
        appID:
          type: string
        inputs:
          description: "inputs expected by app/endpoint for deployment"
          type: object
          additionalProperties:
            type: string
        secretinputs:
          description: "inputs expected by app/endpoint for deployment, those data are not stored in database nor files and only used at deployment time"
          type: object
          additionalProperties:
            type: string
paths:
  /deploy:
    get:
      summary: base entry point to check service
      description: check that service is live
      responses:
        '200':
          description: service is up
          content:
            application/json:
              schema:
                type: object
                properties:
                  version:
                    type: string
                  message:
                    type: string

  /deploy/session/bind:
    post:
      security:
        - ApiKeyAuth: []
      summary: get a token for API calls
      description: checks user api key and get a token for other api calls
      responses:
        '200':
          description: user is authenticated
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
        '401':
          description: invalid api key
  /deploy/ns:
    get:
      security:
        - JWTToken: []
      summary: list namespaces [member]
      description: get all created namespaces
      parameters:
        - in: query
          name: all
          required: false
          schema:
            type: string
          description: set to 1 to get all namespaces (admin only)
      responses:
        '200':
          description: list of namespaces
          content:
            application/json:
              schema:
                type: object
                properties:
                  ns:
                    type: array
                    items:
                      $ref: '#/components/schemas/NSData'
        '403':
          description: invalid token
    post:
      security:
        - JWTToken: []
      summary: list namespaces [admin]
      description: get all created namespaces
      responses:
        '201':
          description: list of namespaces
          content:
            application/json:
              schema:
                type: object
                properties:
                  ns:
                    type: string
                    description: id of the namespace
        '403':
          description: invalid token
  /deploy/ns/{id}:
    put:
      security:
        - JWTToken: []
      summary: update namespaces [owner]
      description: update a namespace
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: id of the namespace
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NSData'
      responses:
        '200':
          description: updated
          content:
            application/json:
              schema:
                type: object
                properties:
                  ns:
                    type: string
                    description: id of the namespace
        '403':
          description: invalid token
        '404':
          description: namespace not found
    get:
      security:
        - JWTToken: []
      summary: get namespace info [owner]
      description: get a namespace info
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: id of the namespace
      responses:
        '200':
          description: namespace result
          content:
            application/json:
              schema:
                type: object
                properties:
                  ns:
                    $ref: '#/components/schemas/NSData'
        '403':
          description: invalid token
        '404':
          description: namespace not found
    delete:
      security:
        - JWTToken: []
      summary: delete namespace [admin]
      description: delete a namespace
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: id of the namespace
      responses:
        '200':
          description: deleted
        '403':
          description: invalid token
        '404':
          description: namespace not found
  /deploy/ns/{id}/recipe:
    get:
      security:
        - JWTToken: []
      summary: get namespace recipes [member]
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: id of the namespace
      responses:
        '200':
          description: list of recipes
          content:
            application/json:
              schema:
                type: object
                properties:
                  recipes:
                    type: array
                    items:
                      $ref: '#/components/schemas/Recipe'
        '403':
          description: invalid token
    post:
      security:
        - JWTToken: []
      summary: create a recipe [member]
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: id of the namespace
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Recipe'
      responses:
        '201':
          description: recipe created
          content:
            application/json:
              schema:
                type: object
                properties:
                  recipe:
                    type: string
                    description: id of the recipe
        '403':
          description: invalid token
  /deploy/ns/{id}/recipe/{recipe}:
    get:
      security:
        - JWTToken: []
      summary: get a recipe [member]
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: id of the namespace
        - in: path
          name: recipe
          required: true
          schema:
            type: string
          description: id of the recipe
      responses:
        '200':
          description: recipe created
          content:
            application/json:
              schema:
                type: object
                properties:
                  recipe:
                    $ref: '#/components/schemas/Recipe'
        '403':
          description: invalid token
        '404':
          description: recipe not found
    put:
      security:
        - JWTToken: []
      summary: update a recipe [member]
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: id of the namespace
        - in: path
          name: recipe
          required: true
          schema:
            type: string
          description: id of the recipe
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Recipe'
      responses:
        '200':
          description: recipe updated
          content:
            application/json:
              schema:
                type: object
                properties:
                  recipe:
                    type: string
                    description: id of the recipe
        '403':
          description: invalid token
    delete:
      security:
        - JWTToken: []
      summary: update a recipe [member]
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: id of the namespace
        - in: path
          name: recipe
          required: true
          schema:
            type: string
          description: id of the recipe
      responses:
        '200':
          description: recipe deleted
          content:
            application/json:
              schema:
                type: object
                properties:
                  recipe:
                    type: string
                    description: id of the recipe
        '403':
          description: invalid token
   
  /deploy/ns/{id}/template:
    get:
      security:
        - JWTToken: []
      summary: get namespace templates [member]
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: id of the namespace
      responses:
        '200':
          description: list of templates
          content:
            application/json:
              schema:
                type: object
                properties:
                  templates:
                    type: array
                    items:
                      $ref: '#/components/schemas/Template'
        '403':
          description: invalid token
    post:
      security:
        - JWTToken: []
      summary: create a template [member]
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: id of the namespace
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Template'
      responses:
        '201':
          description: template created
          content:
            application/json:
              schema:
                type: object
                properties:
                  template:
                    type: string
                    description: id of the template
        '403':
          description: invalid token
  /deploy/ns/{id}/template/{template}:
    get:
      security:
        - JWTToken: []
      summary: get a recipe [member]
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: id of the namespace
        - in: path
          name: template
          required: true
          schema:
            type: string
          description: id of the template
      responses:
        '200':
          description: recipe created
          content:
            application/json:
              schema:
                type: object
                properties:
                  recipe:
                    $ref: '#/components/schemas/Template'
        '403':
          description: invalid token
        '404':
          description: template not found
    put:
      security:
        - JWTToken: []
      summary: update a template [member]
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: id of the namespace
        - in: path
          name: template
          required: true
          schema:
            type: string
          description: id of the recipe
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Template'
      responses:
        '200':
          description: template updated
          content:
            application/json:
              schema:
                type: object
                properties:
                  recipe:
                    type: string
                    description: id of the recipe
        '403':
          description: invalid token
    delete:
      security:
        - JWTToken: []
      summary: update a template [member]
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: id of the namespace
        - in: path
          name: template
          required: true
          schema:
            type: string
          description: id of the template
      responses:
        '200':
          description: template deleted
          content:
            application/json:
              schema:
                type: object
                properties:
                  recipe:
                    type: string
                    description: id of the template
        '403':
          description: invalid token          

  /deploy/ns/{id}/app:
    get:
      security:
        - JWTToken: []
      summary: get namespace applications [member]
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: id of the namespace
      responses:
        '200':
          description: list of applications
          content:
            application/json:
              schema:
                type: object
                properties:
                  apps:
                    type: array
                    items:
                      $ref: '#/components/schemas/Application'
        '403':
          description: invalid token
    post:
      security:
        - JWTToken: []
      summary: create an application [member]
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: id of the namespace
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Application'
      responses:
        '201':
          description: application created
          content:
            application/json:
              schema:
                type: object
                properties:
                  app:
                    type: string
                    description: id of the application
        '403':
          description: invalid token
  /deploy/ns/{id}/app/{application}/inputs:
    get:
      security:
        - JWTToken: []
      summary: get namespace applications needed inputs [member]
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: id of the namespace
        - in: path
          name: application
          required: true
          schema:
            type: string
          description: id of the application
      responses:
        '200':
          description: application details
          content:
            application/json:
              schema:
                type: object
                properties:
                  app:
                    $ref: '#/components/schemas/ApplicationRequirements'
        '403':
          description: invalid token
        '404':
          description: not found
  /deploy/ns/{id}/app/{application}:
    get:
      security:
        - JWTToken: []
      summary: get namespace applications [member]
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: id of the namespace
        - in: path
          name: application
          required: true
          schema:
            type: string
          description: id of the application
      responses:
        '200':
          description: application details
          content:
            application/json:
              schema:
                type: object
                properties:
                  app:
                    $ref: '#/components/schemas/Application'
        '403':
          description: invalid token
        '404':
          description: not found
    put:
      security:
        - JWTToken: []
      summary: update application [member]
      description: update an application
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: id of the namespace
        - in: path
          name: application
          required: true
          schema:
            type: string
          description: id of the application
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Application'
      responses:
        '200':
          description: updated
          content:
            application/json:
              schema:
                type: object
                properties:
                  app:
                    type: string
                    description: id of the application
        '403':
          description: invalid token
        '404':
          description: namespace not found
    delete:
      security:
        - JWTToken: []
      summary: delete application [member]
      description: delete an application
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: id of the namespace
        - in: path
          name: application
          required: true
          schema:
            type: string
          description: id of the application
      responses:
        '200':
          description: deleted
        '403':
          description: invalid token
        '404':
          description: namespace not found         
  /deploy/recipes:
    get:
      summary: get public recipes
      parameters:
        - in: query
          name: light
          schema:
            type: number
          description: return templates without details
      responses:
        '200':
          description: list of recipes
          content:
            application/json:
              schema:
                type: object
                properties:
                  recipes:
                    type: array
                    items:
                      $ref: '#/components/schemas/Recipe'
        '403':
          description: invalid token
  /deploy/apps:
    get:
      summary: get public applications
      responses:
        '200':
          description: list of applications
          content:
            application/json:
              schema:
                type: object
                properties:
                  recipes:
                    type: array
                    items:
                      $ref: '#/components/schemas/Application'
        '403':
          description: invalid token
  /deploy/templates:
    get:
      summary: get public templates
      parameters:
        - in: query
          name: light
          schema:
            type: number
          description: return templates without details
      responses:
        '200':
          description: list of templates
          content:
            application/json:
              schema:
                type: object
                properties:
                  templates:
                    type: array
                    items:
                      $ref: '#/components/schemas/Template'
        '403':
          description: invalid token
  /deploy/endpoints:
    get:
      summary: get public endopints
      responses:
        '200':
          description: list of endpoints
          content:
            application/json:
              schema:
                type: object
                properties:
                  endpoints:
                    type: array
                    items:
                      $ref: '#/components/schemas/Endpoint'
        '403':
          description: invalid token        
  /deploy/ns/{id}/run/{application}:
    post:
      security:
        - JWTToken: []
      summary: run application [member]
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: id of the namespace
        - in: path
          name: application
          required: true
          schema:
            type: string
          description: id of the application
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Run'
      responses:
        '201':
          description: application created
          content:
            application/json:
              schema:
                type: object
                properties:
                  run:
                    type: string
                    description: id of the execution/run
        '403':
          description: invalid token
        '404':
          description: application not found
    get:
      security:
        - JWTToken: []
      summary: get run status of application [member]
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: id of the namespace
        - in: path
          name: application
          required: true
          schema:
            type: string
          description: id of the run
      responses:
        '200':
          description: application status
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Run'
        '403':
          description: invalid token
        '404':
          description: run id not found
    delete:
      security:
        - JWTToken: []
      summary: get run status of application [member]
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: id of the namespace
        - in: path
          name: application
          required: true
          schema:
            type: string
          description: id of the run
      responses:
        '200':
          description: application stop requested
        '403':
          description: invalid token
        '404':
          description: run id not found
  /deploy/ns/{id}/run/{application}/terraform:
    post:
      security:
        - JWTToken: []
      summary: get terraform template and vars for application [member]
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: id of the namespace
        - in: path
          name: application
          required: true
          schema:
            type: string
          description: id of the application
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Run'
      responses:
        '200':
          description: "terraform templates"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TerraformTemplates'
        '403':
          description: invalid token
        '404':
          description: application not found          
  /deploy/ns/{id}/endpoint:
    post:
      security:
        - JWTToken: []
      summary: create endpoint [owner]
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: id of the namespace
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Endpoint'      
      responses:
        '201':
          description: endpoint created
          content:
            application/json:
              schema:
                type: object
                properties:
                  endopint:
                    type: string
                    description: id of the endpoint
        '403':
          description: invalid token
        '404':
          description: application not found
    get:
      security:
        - JWTToken: []
      summary: get namespace endpoints [member]
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: id of the namespace
      responses:
        '200':
          description: endpoints list
          content:
            application/json:
              schema:
                type: object
                properties:
                  endpoints:
                    type: array
                    items:
                      type: object
        '403':
          description: invalid token
        '404':
          description: namespace id not found
  /deploy/ns/{id}/endpoint/{endpoint}:
    get:
      security:
        - JWTToken: []
      summary: get endpoint info [member]
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: id of the namespace
        - in: path
          name: endpoint
          required: true
          schema:
            type: string
          description: id of the endpoint
      responses:
        '200':
          description: endpoint info
          content:
            application/json:
              schema:
                type: object
                properties:
                  endpoint:
                    type: object
        '403':
          description: invalid token
        '404':
          description: run id not found
    delete:
      security:
        - JWTToken: []
      summary: get run status of application [member]
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: id of the namespace
        - in: path
          name: endpoint
          required: true
          schema:
            type: string
          description: id of the endpoint
      responses:
        '200':
          description: endpoint deleted
        '403':
          description: invalid token
        '404':
          description: endpoint id not found
  /deploy/ns/{id}/endpoint/{endpoint}/secret:
    get:
      security:
        - JWTToken: []
      summary: checks if user has a secret for endpoint [member]
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: id of the namespace
        - in: path
          name: endpoint
          required: true
          schema:
            type: string
          description: id of the endpoint
      responses:
        '200':
          description: secret found
        '403':
          description: invalid token
        '404':
          description: no secret found
    put:
      security:
        - JWTToken: []
      summary: set crypted password for endpoint [member]
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: id of the namespace
        - in: path
          name: endpoint
          required: true
          schema:
            type: string
          description: id of the endpoint
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EndpointSecret' 
      responses:
        '200':
          description: secret updated
        '403':
          description: invalid token
        '404':
          description: secret not found
    delete:
      security:
        - JWTToken: []
      summary: set crypted password for endpoint [member]
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: id of the namespace
        - in: path
          name: endpoint
          required: true
          schema:
            type: string
          description: id of the endpoint
      responses:
        '200':
          description: secret removed
        '403':
          description: invalid token
        '404':
          description: secret not found
  /deploy/run:
    get:
      security:
        - JWTToken: []
      summary: get user runs [member]
      parameters:
        - in: query
          name: skip
          schema:
            type: number
          description: skip results
        - in: query
          name: limit
          schema:
            type: number
          description: number of runs to return
      responses:
        '200':
          description: run info
          content:
            application/json:
              schema:
                type: object
                properties:
                  runs:
                    type: array
                    items:
                      $ref: '#/components/schemas/Run'
        '403':
          description: invalid token
        '404':
          description: run id not found
  /deploy/ns/{id}/run:
    get:
      security:
        - JWTToken: []
      summary: get user runs for namespace [member]
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: id of the namespace
        - in: query
          name: skip
          schema:
            type: number
          description: skip results
        - in: query
          name: limit
          schema:
            type: number
          description: number of runs to return
        - in: query
          name: all
          schema:
            type: number
          description: set to 1 to get runs for all namespace members [admin or owner]
      responses:
        '200':
          description: endpoint info
          content:
            application/json:
              schema:
                type: object
                properties:
                  runs:
                    type: array
                    items:
                      $ref: '#/components/schemas/Run'
        '403':
          description: invalid token
        '404':
          description: run id not found
